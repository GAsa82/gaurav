{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f5d35d4b-e509-4ce6-acc2-609bbd5e5b32",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "20a8c1c8-a8dc-46a7-ace9-e1517e6569ca",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b4d2cb67-2f38-4b3e-94cc-15132c2a1e20",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- Dataset Info ---\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 6 entries, 0 to 5\n",
      "Data columns (total 4 columns):\n",
      " #   Column    Non-Null Count  Dtype  \n",
      "---  ------    --------------  -----  \n",
      " 0   Name      6 non-null      object \n",
      " 1   Age       5 non-null      float64\n",
      " 2   JoinDate  5 non-null      object \n",
      " 3   Salary    5 non-null      float64\n",
      "dtypes: float64(2), object(2)\n",
      "memory usage: 324.0+ bytes\n",
      "None\n",
      "\n",
      "--- Summary Statistics ---\n",
      "         Name        Age    JoinDate       Salary\n",
      "count       6   5.000000           5      5.00000\n",
      "unique      5        NaN           4          NaN\n",
      "top     Alice        NaN  2021-01-15          NaN\n",
      "freq        2        NaN           2          NaN\n",
      "mean      NaN  28.600000         NaN  62000.00000\n",
      "std       NaN   4.159327         NaN  13038.40481\n",
      "min       NaN  25.000000         NaN  50000.00000\n",
      "25%       NaN  25.000000         NaN  50000.00000\n",
      "50%       NaN  28.000000         NaN  60000.00000\n",
      "75%       NaN  30.000000         NaN  70000.00000\n",
      "max       NaN  35.000000         NaN  80000.00000\n",
      "\n",
      "--- Missing Value Count ---\n",
      "Name        0\n",
      "Age         1\n",
      "JoinDate    1\n",
      "Salary      1\n",
      "dtype: int64\n",
      "          Missing Values  Percentage\n",
      "Name                   0    0.000000\n",
      "Age                    1   16.666667\n",
      "JoinDate               1   16.666667\n",
      "Salary                 1   16.666667\n",
      "Duplicate rows found: 1\n",
      "\n",
      "--- Data Types ---\n",
      "Name         object\n",
      "Age         float64\n",
      "JoinDate     object\n",
      "Salary      float64\n",
      "dtype: object\n",
      "Age: 0 outliers\n",
      "Salary: 0 outliers\n",
      "\n",
      "--- Data Quality Scorecard ---\n",
      "Missing Rate: 12.50%\n",
      "Duplicate Rate: 16.67%\n",
      "Data Quality Score: 70.83/100\n"
     ]
    }
   ],
   "source": [
    "df = pd.read_csv('data/your_dataset.csv')\n",
    "\n",
    "# Dataset Info\n",
    "print(\"\\n--- Dataset Info ---\")\n",
    "print(df.info())\n",
    "\n",
    "# Summary Stats\n",
    "print(\"\\n--- Summary Statistics ---\")\n",
    "print(df.describe(include='all'))\n",
    "\n",
    "# Missing Values\n",
    "print(\"\\n--- Missing Value Count ---\")\n",
    "missing_values = df.isnull().sum()\n",
    "print(missing_values)\n",
    "\n",
    "missing_percentage = (missing_values / len(df)) * 100\n",
    "missing_report = pd.DataFrame({'Missing Values': missing_values, 'Percentage': missing_percentage})\n",
    "print(missing_report)\n",
    "\n",
    "# Duplicate Rows\n",
    "duplicates = df.duplicated()\n",
    "print(f\"Duplicate rows found: {duplicates.sum()}\")\n",
    "\n",
    "# Data Type Consistency\n",
    "print(\"\\n--- Data Types ---\")\n",
    "print(df.dtypes)\n",
    "\n",
    "# Outlier Detection\n",
    "numeric_cols = df.select_dtypes(include=[np.number]).columns\n",
    "for col in numeric_cols:\n",
    "    Q1 = df[col].quantile(0.25)\n",
    "    Q3 = df[col].quantile(0.75)\n",
    "    IQR = Q3 - Q1\n",
    "    outliers = df[(df[col] < Q1 - 1.5 * IQR) | (df[col] > Q3 + 1.5 * IQR)]\n",
    "    print(f\"{col}: {len(outliers)} outliers\")\n",
    "\n",
    "# Data Quality Scorecard\n",
    "def quality_scorecard(df):\n",
    "    total_rows = len(df)\n",
    "    missing_rate = df.isnull().sum().sum() / df.size * 100\n",
    "    duplicate_rate = df.duplicated().sum() / total_rows * 100\n",
    "    quality_score = 100 - (missing_rate + duplicate_rate)\n",
    "    print(\"\\n--- Data Quality Scorecard ---\")\n",
    "    print(f\"Missing Rate: {missing_rate:.2f}%\")\n",
    "    print(f\"Duplicate Rate: {duplicate_rate:.2f}%\")\n",
    "    print(f\"Data Quality Score: {quality_score:.2f}/100\")\n",
    "\n",
    "quality_scorecard(df)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f28b17e2-4c80-490f-b2b0-f9f6855f1c32",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
